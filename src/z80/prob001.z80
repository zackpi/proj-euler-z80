.nolist
#include "ti83plus.inc"
#define progStart $9D95

#comment
> Ti8X Z80 ASM Project Euler Problems
> by Zachary Pitcher
> 
> Problem 1: Multiples of 3 and 5
> 	If we list all the natural numbers below 10 that are multiples of 3 or 5, 
> 	we get 3, 5, 6 and 9. The sum of these multiples is 23.
> 	Find the sum of all the multiples of 3 or 5 below 1000.
#endcomment

.list
.org progStart-2
.db t2ByteTok, tAsmCmp
start:	jp main			; start execution at main


; use toom-cook algorithm and divide along bytes or words
; @param: 	hl	contains pointer to data to be multiplied
; @reg:	idk
bigmul:
	ret


; converts a hex value to binary coded decimal
; uses double dabble algorithm
; @reg:	a,b,c
hex2bcd:
	scf
	ccf
	ld a, (vallen)
	ld c, a 		; number of iterations of h2dshhx
	rla
	rla
	rla		; multiply by 8 for number of bytes
	ld b, a 		; number of iterations of h2dfor

	scf
	ccf
	ld a, (bcdlen)
	ld d, a 		; multiply by 8 for number of bytes

h2dfor:	push bc
	scf
	ccf

	ld hl, valbuf
	ld b, c 		; number of iterations of h2dshhx
h2dshhx:	rl (hl)		; shift the whole thing left one
	inc hl
	djnz h2dshhx

	push af

	ld hl, bcdbuf
	ld b, d		
h2dadd3:	
lonibchk:	ld a, (hl)	
	and $0f
	cp $05
	jr c, hinibchk
	add a, $03		; add 3 to low nibble if > 4
hinibchk:	ld c, a
	ld a, (hl)
	and $f0
	cp $50
	jr c, endchk
	add a, $30		; add 3 to high nibble if > 4
endchk:	add a, c
	ld (hl), a 		; write back
	djnz h2dadd3

	pop af

	ld hl, bcdbuf
	ld b, d		; number of iterations of h2dshdc
h2dshdc:	rl (hl)
	inc hl
	djnz h2dshdc	; shift carry into bcd

	pop bc
	djnz h2dfor
	ret
bcdlen:	.db $05
bcdbuf:	.fill $100
; end prtdec


; prints a hex nibble
; @param: 	a 	contains nibble to be printed
; @reg:	a
prtnbl:	
	cp $0a
	jr c, pnbnum	; compare with $A to test if letter or number			
pnbltr:	add a, $07
pnbnum:	add a, $30		; convert to ascii for both cases
	bcall(_PutC)	; print the ascii char in a
	ret
; end prtnbl


; prints data as hex bytes (little-endian)
; @param: 	hl	contains pointer to data to be printed
; @reg:	a,b,c
prthex:	
	dec hl
	ld b, 0
	ld c, (hl)		; c <- length of data in bytes
	add hl, bc 		; jump to end of data
	ld b, c
phxfor:	ld a, (hl)		; a <- byte of data to be printed
	and a, $f0
	rra
	rra
	rra
	rra		; a <- high nibble
	call prtnbl
	ld a, (hl)
	and a, $0f		; a <- low nibble
	call prtnbl
	dec hl
	djnz phxfor
	ret
; end prthex


; execution starts here
main:	
	bcall(_ClrLCDFull)	; clear the home screen
	ld hl, 0
	ld (CurRow), hl	; set CurRow to 0
	
	ld hl, valbuf
	call hex2bcd

	ld hl, bcdbuf
	call prthex		; print value
	bcall(_NewLine)	
	ret
; end main


vallen:
	.db $01		; number of bytes in value
valbuf:
	.db $f3
	.fill 100
